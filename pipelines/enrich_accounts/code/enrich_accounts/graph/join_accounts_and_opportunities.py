from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.types import *
from prophecy.utils import *
from prophecy.libs import typed_lit
from enrich_accounts.config.ConfigStore import *
from enrich_accounts.functions import *

def join_accounts_and_opportunities(spark: SparkSession, in0: DataFrame, in1: DataFrame, ) -> DataFrame:
    return in0\
        .alias("in0")\
        .join(in1.alias("in1"), (col("in1.Id") == col("in0.AccountId")), "left_outer")\
        .select(col("in1.Id").alias("Id"), col("in1.IsDeleted").alias("IsDeleted"), col("in1.MasterRecordId").alias("MasterRecordId"), col("in1.Name").alias("Name"), col("in1.Type").alias("Type"), col("in1.ParentId").alias("ParentId"), col("in1.BillingStreet").alias("BillingStreet"), col("in1.BillingCity").alias("BillingCity"), col("in1.BillingState").alias("BillingState"), col("in1.BillingPostalCode").alias("BillingPostalCode"), col("in1.BillingCountry").alias("BillingCountry"), col("in1.BillingLatitude").alias("BillingLatitude"), col("in1.BillingLongitude").alias("BillingLongitude"), col("in1.BillingGeocodeAccuracy").alias("BillingGeocodeAccuracy"), col("in1.ShippingStreet").alias("ShippingStreet"), col("in1.ShippingCity").alias("ShippingCity"), col("in1.ShippingState").alias("ShippingState"), col("in1.ShippingPostalCode").alias("ShippingPostalCode"), col("in1.ShippingCountry").alias("ShippingCountry"), col("in1.ShippingLatitude").alias("ShippingLatitude"), col("in1.ShippingLongitude").alias("ShippingLongitude"), col("in1.ShippingGeocodeAccuracy").alias("ShippingGeocodeAccuracy"), col("in1.Phone").alias("Phone"), col("in1.Fax").alias("Fax"), col("in1.AccountNumber").alias("AccountNumber"), col("in1.Website").alias("Website"), col("in1.Sic").alias("Sic"), col("in1.Industry").alias("Industry"), col("in1.AnnualRevenue").alias("AnnualRevenue"), col("in1.NumberOfEmployees").alias("NumberOfEmployees"), col("in1.Ownership").alias("Ownership"), col("in1.TickerSymbol").alias("TickerSymbol"), col("in1.Description").alias("Description"), col("in1.Rating").alias("Rating"), col("in1.Site").alias("Site"), col("in1.OwnerId").alias("OwnerId"), col("in1.CreatedDate").alias("CreatedDate"), col("in1.CreatedById").alias("CreatedById"), col("in1.LastModifiedDate").alias("LastModifiedDate"), col("in1.LastModifiedById").alias("LastModifiedById"), col("in1.SystemModstamp").alias("SystemModstamp"), col("in1.LastActivityDate").alias("LastActivityDate"), col("in1.Jigsaw").alias("Jigsaw"), col("in1.JigsawCompanyId").alias("JigsawCompanyId"), col("in1.CleanStatus").alias("CleanStatus"), col("in1.AccountSource").alias("AccountSource"), col("in1.DunsNumber").alias("DunsNumber"), col("in1.Tradestyle").alias("Tradestyle"), col("in1.NaicsCode").alias("NaicsCode"), col("in1.NaicsDesc").alias("NaicsDesc"), col("in1.YearStarted").alias("YearStarted"), col("in1.SicDesc").alias("SicDesc"), col("in1.DandbCompanyId").alias("DandbCompanyId"), col("in1.OperatingHoursId").alias("OperatingHoursId"), col("in1.CustomerPriority__c").alias("CustomerPriority__c"), col("in1.SLA__c").alias("SLA__c"), col("in1.Active__c").alias("Active__c"), col("in1.NumberofLocations__c").alias("NumberofLocations__c"), col("in1.UpsellOpportunity__c").alias("UpsellOpportunity__c"), col("in1.SLASerialNumber__c").alias("SLASerialNumber__c"), col("in1.SLAExpirationDate__c").alias("SLAExpirationDate__c"), col("in0.NumberOfOpportunity").alias("NumberOfOpportunity"), col("in0.Amount").alias("Amount"), col("in0.ExpectedRevenue").alias("ExpectedRevenue"), col("in0.ClosedQuarter").alias("ClosedQuarter"))
